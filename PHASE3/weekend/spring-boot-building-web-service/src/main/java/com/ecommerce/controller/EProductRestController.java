package com.ecommerce.controller;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.ecommerce.entity.EProduct;
import com.ecommerce.repositry.EProductRepositry;

@RestController
@CrossOrigin
@RequestMapping("api/product/v1")
public class EProductRestController {
	
	@Autowired
	private final EProductRepositry eProductRepositry = null;	
		
	@GetMapping(value="/list", produces="application/json")
	public List<EProduct> listOfProducts() {
		
		List<EProduct> products = eProductRepositry.findAll();
		
		return products;			
	}
	
	@GetMapping(value="/details/{id}", produces="application/json")
	public EProduct getProducts(@PathVariable("id") long id) {
		
		Optional<EProduct> productFromRepo = eProductRepositry.findById(id);
		
		if(productFromRepo.isPresent()) {
			EProduct product = productFromRepo.get();
			return product;		
		}
		
		return null;		
			
	}
	
	@GetMapping(value="/delete/{id}", produces="application/json")
	public void deleteProducts(@PathVariable("id") long id) {
		
		Optional<EProduct> productFromRepo = eProductRepositry.findById(id);
		
		if(productFromRepo.isPresent()) {
			eProductRepositry.deleteById(id);
		}		
			
	}
	
	@PostMapping(value="/add", consumes="application/json", produces="application/json")
	public EProduct addProduct(@RequestBody EProduct product) {
		
		// product in method argument will have the name and price as given by the client
		// in the format { "name": "Keyboard", "price":5656.25}
		
		// Save the above product to get the updated product that has the id as well.
		// id is generated by the datab
		EProduct productFromDB = eProductRepositry.save(product); 
		
		return productFromDB;			
	}
	
	@PostMapping(value="/update/{id}", consumes="application/json", produces="application/json")
	public void updateProduct(@PathVariable("id") long id, @RequestBody EProduct product) {
		
		Optional<EProduct> productFromRepo = eProductRepositry.findById(id);
		
		if(productFromRepo.isPresent()) {
			EProduct product1 = productFromRepo.get();
			product1.setName(product.getName());
			product1.setPrice(product.getPrice());
			eProductRepositry.save(product1);
		}
					
	}
	
	

}
